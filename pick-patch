#!/usr/bin/env python3
#
# Copyright 2018 Rick Chang <chchang915@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sys, os, urllib.request, netrc, json, subprocess, argparse
import ssl
from urllib.parse import urlparse

# ------ Customization ------
REPO='repo'
CONNECT_TIMEOUT=30
FETCH_PROTOCOL_ORDER = ['http', 'ssh', 'git']
DEFAULT_NETRC_PATH = "~/.netrc"
DEFAULT_GERRIT_SERVER = "TBD"
# ---------------------------

CUR_PATH    = os.getcwd()
RED         = "\x1b[31m"
GREEN       = "\x1b[32m"
NONE        = "\x1b[0m"

def Loge(s):
    print(RED + s + NONE)

def Logm(s):
    print(GREEN + s + NONE)

def Run(cmd):
    return subprocess.call(cmd.split(' '))

def RunLog(cmd, silent=False):
    try:
        ret = subprocess.check_output(cmd.split(' '),
                                      stderr=subprocess.STDOUT)
        return ret.decode('UTF-8').rstrip()
    except Exception as e:
        if not silent:
            print(e)
        return None

class GerritRest:
    # https://github.com/GerritCodeReview/gerrit/blob/master/Documentation/rest-api.txt
    def __init__(self, url, username, password):
        url = url.rstrip('/')
        password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
        password_mgr.add_password(None, url, username, password)
        digest_auth = urllib.request.HTTPDigestAuthHandler(password_mgr)
        basic_auth = urllib.request.HTTPBasicAuthHandler(password_mgr)
        opener = urllib.request.build_opener(digest_auth, basic_auth)
        urllib.request.install_opener(opener)
        self.server = url

    def query(self, q, verbose=False):
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json;charset=UTF-8"
        }

        ssl._create_default_https_context = ssl._create_unverified_context
        url = "%s/a%s" % (self.server, q)
        if verbose:
            print("Query: %s" % url)
        req = urllib.request.Request(url, None, headers)
        try:
            response = urllib.request.urlopen(req, None, CONNECT_TIMEOUT)
        except Exception as e:
            Loge("query fail: %s" % e)
            print (e.info())
            return None
        # skip )]}'
        response.readline()
        data = json.loads(response.read().decode("UTF-8"))
        if verbose:
            print("Response: %s" % data)
        return data

def GetLog(commit_id):
    return RunLog("git log --no-decorate -1 %s" % commit_id)

def GetMachine(url):
    info = urlparse(url)
    machine = info.netloc
    if info.port:
        return machine.replace(":%s" % info.port, "")
    return machine

def GetLoginInfoNetrc(url, path):
    path = os.path.expanduser(path)
    if not os.path.isfile(path):
        Loge("Can't find netrc path '%s'" % (path))
        return None, None

    handle = netrc.netrc(path)
    machine = GetMachine(url)
    if not machine:
        Loge("Can't find machine from '%s'" % (url))
        return None, None
    info = handle.authenticators(machine)
    if not info:
        Loge("Can't find machine '%s' in '%s'" % (machine, path))
        return None, None
    (login, account, password) = info
    return (login, password)

def ParseArguments(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('change_id', nargs='+',
                        help = 'ex. 12345, 12345/1')
    parser.add_argument('-u', '--user', nargs=1,
                        help='gerrit user id')
    parser.add_argument('-p', '--password', nargs=1,
                        help='gerrit HTTP password')
    parser.add_argument('-g', '--gerrit', nargs=1, default=[DEFAULT_GERRIT_SERVER],
                        help='gerrit server url ex. https://gerrit.mycompany.com')
    parser.add_argument('-d', '--dryrun', action='store_true', default=False,
                        help='show what would be done')
    parser.add_argument('-n', '--netrc', nargs=1, default=[DEFAULT_NETRC_PATH],
                        help='assign netrc path ex. ~/.netrc')
    parser.add_argument('-i', '--install', nargs=1, default='',
                        help='assign install path rather than resolving from repo command')
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help='show more logs')
    return parser.parse_args(argv[1:])

def ChangeIdToRefId(change_id, patchset_id):
    hash_id = str(int(change_id) % 100)
    if len(hash_id) == 1:
        hash_id = "0" + hash_id
    return "refs/changes/%s/%s/%s" % (hash_id, change_id, patchset_id)

def GetRemote(fetch_info):
    remote = ''
    for prot in FETCH_PROTOCOL_ORDER:
        if prot in fetch_info:
            remote = fetch_info[prot]['url']
            break
    return remote

def ResponseToPatch(response, change_id, patchset_id):
    info = response[0]
    project = info['project']
    current_revision = info['current_revision']
    if not patchset_id:
        patchset_id = info['revisions'][current_revision]['_number']
    fetch_info = info['revisions'][current_revision]['fetch']

    remote = GetRemote(fetch_info)
    if not remote:
        Loge("Can't find remote repository for %s" % change_id)
        print(fetch_info)
        return None

    patch = {'project': project, 'remote': remote, 'patch': "%s/%s" % (change_id, patchset_id), 'ref': ChangeIdToRefId(change_id, patchset_id)}
    return patch

def GetChangeIdInfo(change_id):
    patchset_id = ''
    if '/' in change_id:
        compound_id = change_id.split('/')
        if len(compound_id) != 2:
            return None, None
        change_id = compound_id[0]
        patchset_id = compound_id[1]

    if not change_id.isdigit():
        return None, None
    if patchset_id and not patchset_id.isdigit():
        return None, None
    return change_id, patchset_id

def GetPatchList(opts, rest):
    patch_list = {}
    for input_id in opts.change_id:
        change_id, patchset_id = GetChangeIdInfo(input_id)
        if not change_id:
            Loge("error: Unknown change id format '%s'" % input_id)
            return None

        query = '/changes/?q=%s&o=%s' % (change_id, "CURRENT_REVISION")
        response = rest.query(query, opts.verbose)
        if opts.verbose:
            print("-" * 60)
        if not response:
            Loge ("Can't find change id '%s'" % change_id)
            return None

        patch = ResponseToPatch(response, change_id, patchset_id)
        if not patch:
            return None

        project = patch['project']
        patch_list[project] = patch_list.get(project, [])
        patch_list[project].append(patch)
    return patch_list

def InstallPatch(opts, remote, ref_id):
    if Run("git fetch %s %s" % (remote, ref_id)):
        return 1

    if opts.dryrun:
        print(GetLog("FETCH_HEAD"))
        return 0

    ret = Run("git cherry-pick FETCH_HEAD")
    return ret

def CheckInstallPath(full_path, project, patches):
    error_msg = "The install path for the project can't be found."
    if not full_path:
        error_msg = "The install path can't be resolved from command '%s list'." % REPO
    elif not os.path.exists(full_path):
        error_msg = "The install path '%s' is not found." % full_path
    else:
        return True

    Loge("[PROJECT][%s]" % project)
    print('''\
WARNING: %s
    (use -i argument to assign right path for the patches)
    (use the following commands manually in the right path)''' % error_msg)
    print("-" * 60)
    for patch in patches:
        print("git fetch %s %s && git cherry-pick FETCH_HEAD" % (patch['remote'], patch['ref']))
    print("-" * 60)
    return False

def InstallPatches(opts, project, patches):
    if not opts.install:
        path = RunLog("%s list -p %s" % (REPO, project), silent=True)
        full_path = RunLog("%s list -pf %s" % (REPO, project), silent=True)
    else:
        path = full_path = opts.install[0]

    if not CheckInstallPath(full_path, project, patches):
        return

    Logm("[%s]" % full_path)
    os.chdir(full_path)
    for patch in patches:
        remote = patch['remote']
        ref_id = patch['ref']

        print("Pick: %s %s" % (remote, ref_id))
        print("-" * 60)
        ret = InstallPatch(opts, remote, ref_id)
        print("-" * 60)
        if ret:
            break
    os.chdir(CUR_PATH)

def main(argv):
    opts = ParseArguments(argv)
    
    if not opts.user and not opts.password:
        (opts.user, opts.password) = GetLoginInfoNetrc(opts.gerrit[0], opts.netrc[0])
    if not opts.user and not opts.password:
        return 1
    
    rest = GerritRest(opts.gerrit[0], opts.user, opts.password)
    
    print("Getting patches from '%s' ..." % opts.gerrit[0])
    patch_list = GetPatchList(opts, rest)
    if not patch_list:
        return 1

    print("Installing patches ...")
    for project, patches in patch_list.items():
        InstallPatches(opts, project, patches)

if __name__ == '__main__':
    main(sys.argv)
